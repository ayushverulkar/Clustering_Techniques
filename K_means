{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5abe58fe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-22T16:44:58.677014Z",
     "iopub.status.busy": "2024-04-22T16:44:58.676442Z",
     "iopub.status.idle": "2024-04-22T16:45:03.363862Z",
     "shell.execute_reply": "2024-04-22T16:45:03.362305Z"
    },
    "papermill": {
     "duration": 4.69653,
     "end_time": "2024-04-22T16:45:03.367665",
     "exception": false,
     "start_time": "2024-04-22T16:44:58.671135",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of rows before: 366\n",
      "Number of rows after: 358\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cluster Labels: [2 3 0 5 4 2 1 4 2 2 3 2 2 3 0 2 2 5 4 1 1 2 1 4 1 3 1 1 2 4 3 2 3 2 4 3 2\n",
      " 2 3 2 1 0 2 1 2 0 4 2 3 3 1 3 2 0 2 2 1 3 1 3 2 0 3 2 1 3 2 1 0 1 2 2 2 3\n",
      " 0 1 3 2 2 2 1 3 5 0 3 2 2 2 1 3 4 2 2 1 3 1 2 1 3 2 2 3 2 3 4 3 3 4 1 4 4\n",
      " 1 2 4 2 3 2 1 1 3 3 2 1 4 1 2 3 3 4 1 2 3 2 2 4 3 2 5 5 4 4 4 2 1 2 2 2 3\n",
      " 2 3 1 0 2 0 2 2 2 2 0 1 2 3 5 4 2 4 4 5 5 5 0 5 5 2 0 0 5 2 3 3 1 2 2 2 2\n",
      " 5 0 0 0 5 5 2 4 2 2 2 1 1 1 1 1 3 3 5 5 5 5 5 4 4 4 4 4 4 2 2 2 2 1 1 1 1\n",
      " 1 1 1 2 2 2 2 3 3 3 3 3 3 1 1 3 3 3 3 3 3 3 3 4 4 0 0 0 0 0 2 2 2 2 2 2 1\n",
      " 1 1 2 2 2 3 3 5 3 5 2 2 2 2 2 3 3 2 2 2 0 0 0 4 3 3 5 3 1 1 1 1 1 4 0 4 2\n",
      " 3 3 2 2 2 3 3 3 4 4 4 4 4 3 3 3 3 2 2 3 3 2 4 4 2 3 3 2 2 1 1 3 3 1 1 4 3\n",
      " 1 1 1 1 2 2 1 1 1 3 3 3 1 1 3 3 5 3 2 2 2 2 4 4 3]\n",
      "Cluster 0 indexes: [2, 14, 41, 45, 53, 61, 68, 74, 83, 151, 153, 158, 170, 174, 175, 186, 187, 188, 247, 248, 249, 250, 251, 279, 280, 281, 293]\n",
      "\n",
      "Cluster 1 indexes: [6, 19, 20, 22, 24, 26, 27, 40, 43, 50, 56, 58, 64, 67, 69, 75, 80, 88, 93, 95, 97, 108, 111, 117, 118, 122, 124, 129, 143, 150, 159, 180, 196, 197, 198, 199, 200, 218, 219, 220, 221, 222, 223, 224, 235, 236, 258, 259, 260, 287, 288, 289, 290, 291, 325, 326, 329, 330, 333, 334, 335, 336, 339, 340, 341, 345, 346]\n",
      "\n",
      "Cluster 2 indexes: [0, 5, 8, 9, 11, 12, 15, 16, 21, 28, 31, 33, 36, 37, 39, 42, 44, 47, 52, 54, 55, 60, 63, 66, 70, 71, 72, 77, 78, 79, 85, 86, 87, 91, 92, 96, 99, 100, 102, 112, 114, 116, 121, 125, 130, 132, 133, 136, 142, 144, 145, 146, 148, 152, 154, 155, 156, 157, 160, 164, 173, 177, 181, 182, 183, 184, 191, 193, 194, 195, 214, 215, 216, 217, 225, 226, 227, 228, 252, 253, 254, 255, 256, 257, 261, 262, 263, 269, 270, 271, 272, 273, 276, 277, 278, 295, 298, 299, 300, 313, 314, 317, 320, 323, 324, 337, 338, 351, 352, 353, 354]\n",
      "\n",
      "Cluster 3 indexes: [1, 10, 13, 25, 30, 32, 35, 38, 48, 49, 51, 57, 59, 62, 65, 73, 76, 81, 84, 89, 94, 98, 101, 103, 105, 106, 115, 119, 120, 126, 127, 131, 135, 147, 149, 161, 178, 179, 201, 202, 229, 230, 231, 232, 233, 234, 237, 238, 239, 240, 241, 242, 243, 244, 264, 265, 267, 274, 275, 283, 284, 286, 296, 297, 301, 302, 303, 309, 310, 311, 312, 315, 316, 321, 322, 327, 328, 332, 342, 343, 344, 347, 348, 350, 357]\n",
      "\n",
      "Cluster 4 indexes: [4, 7, 18, 23, 29, 34, 46, 90, 104, 107, 109, 110, 113, 123, 128, 134, 139, 140, 141, 163, 165, 166, 192, 208, 209, 210, 211, 212, 213, 245, 246, 282, 292, 294, 304, 305, 306, 307, 308, 318, 319, 331, 355, 356]\n",
      "\n",
      "Cluster 5 indexes: [3, 17, 82, 137, 138, 162, 167, 168, 169, 171, 172, 176, 185, 189, 190, 203, 204, 205, 206, 207, 266, 268, 285, 349]\n",
      "\n",
      "Value 2: Count 111\n",
      "Value 3: Count 85\n",
      "Value 0: Count 27\n",
      "Value 5: Count 24\n",
      "Value 4: Count 44\n",
      "Value 1: Count 67\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "Original Labels: [2 1 3 1 3 2 5 3 4 4 1 2 2 1 3 4 2 1 3 5 6 2 5 3 5 1 6 5 2 3 1 2 1 2 3 1 2\n",
      " 4 1 2 5 3 4 6 2 3 3 4 1 1 5 1 2 3 4 2 6 1 5 1 2 3 1 4 5 1 2 6 3 5 4 2 2 1\n",
      " 3 5 1 2 2 2 5 1 1 3 1 4 2 2 5 1 3 4 2 5 1 6 2 5 1 2 2 1 4 1 3 1 1 3 5 3 3\n",
      " 5 2 3 4 1 2 5 6 1 1 2 6 3 5 4 1 1 3 5 5 1 4 2 3 1 2 1 1 3 3 3 2 5 4 2 2 1\n",
      " 1 1 5 3 2 3 2 2 4 2 3 6 2 1 1 3 4 3 3 1 1 1 3 1 1 2 3 3 1 1 1 1 6 2 2 2 2\n",
      " 1 3 3 3 1 1 2 3 2 2 2 5 5 5 5 5 1 1 1 1 1 1 1 3 3 3 3 3 3 4 4 4 4 5 5 5 5\n",
      " 5 5 5 2 2 2 2 1 1 1 1 1 1 6 6 1 1 1 1 1 1 1 1 3 3 3 3 3 3 3 4 4 4 4 4 4 6\n",
      " 6 6 4 4 4 1 1 1 1 1 2 2 4 4 4 1 1 2 2 2 3 3 3 3 1 1 1 1 5 5 5 5 5 3 3 3 4\n",
      " 1 1 4 4 4 1 1 1 3 3 3 3 3 1 1 1 1 4 4 1 1 4 3 3 4 1 1 4 4 5 5 1 1 5 5 3 1\n",
      " 5 5 6 6 4 4 6 6 6 1 1 1 5 5 1 1 1 1 2 2 4 4 3 3 1]\n",
      "1 indexes: [1, 3, 10, 13, 17, 25, 30, 32, 35, 38, 48, 49, 51, 57, 59, 62, 65, 73, 76, 81, 82, 84, 89, 94, 98, 101, 103, 105, 106, 115, 119, 120, 126, 127, 131, 135, 137, 138, 147, 148, 149, 161, 162, 167, 168, 169, 171, 172, 176, 177, 178, 179, 185, 189, 190, 201, 202, 203, 204, 205, 206, 207, 229, 230, 231, 232, 233, 234, 237, 238, 239, 240, 241, 242, 243, 244, 264, 265, 266, 267, 268, 274, 275, 283, 284, 285, 286, 296, 297, 301, 302, 303, 309, 310, 311, 312, 315, 316, 321, 322, 327, 328, 332, 342, 343, 344, 347, 348, 349, 350, 357]\n",
      "\n",
      "2 indexes: [0, 5, 11, 12, 16, 21, 28, 31, 33, 36, 39, 44, 52, 55, 60, 66, 71, 72, 77, 78, 79, 86, 87, 92, 96, 99, 100, 112, 116, 121, 133, 136, 142, 145, 146, 152, 154, 155, 157, 160, 173, 181, 182, 183, 184, 191, 193, 194, 195, 225, 226, 227, 228, 269, 270, 276, 277, 278, 351, 352]\n",
      "\n",
      "3 indexes: [2, 4, 7, 14, 18, 23, 29, 34, 41, 45, 46, 53, 61, 68, 74, 83, 90, 104, 107, 109, 110, 113, 123, 128, 134, 139, 140, 141, 151, 153, 158, 163, 165, 166, 170, 174, 175, 186, 187, 188, 192, 208, 209, 210, 211, 212, 213, 245, 246, 247, 248, 249, 250, 251, 279, 280, 281, 282, 292, 293, 294, 304, 305, 306, 307, 308, 318, 319, 331, 355, 356]\n",
      "\n",
      "4 indexes: [8, 9, 15, 37, 42, 47, 54, 63, 70, 85, 91, 102, 114, 125, 132, 144, 156, 164, 214, 215, 216, 217, 252, 253, 254, 255, 256, 257, 261, 262, 263, 271, 272, 273, 295, 298, 299, 300, 313, 314, 317, 320, 323, 324, 337, 338, 353, 354]\n",
      "\n",
      "5 indexes: [6, 19, 22, 24, 27, 40, 50, 58, 64, 69, 75, 80, 88, 93, 97, 108, 111, 117, 124, 129, 130, 143, 150, 196, 197, 198, 199, 200, 218, 219, 220, 221, 222, 223, 224, 287, 288, 289, 290, 291, 325, 326, 329, 330, 333, 334, 345, 346]\n",
      "\n",
      "6 indexes: [20, 26, 43, 56, 67, 95, 118, 122, 159, 180, 235, 236, 258, 259, 260, 335, 336, 339, 340, 341]\n",
      "\n",
      "Value 2: Count 60\n",
      "Value 1: Count 111\n",
      "Value 3: Count 71\n",
      "Value 5: Count 48\n",
      "Value 4: Count 48\n",
      "Value 6: Count 20\n",
      "Total intra-cluster distance: 180.032\n",
      "Total inter-cluster distance: 184.988\n",
      "Confusion Matrix:\n",
      "[[1 0 0 0 0 0]\n",
      " [0 1 0 0 0 0]\n",
      " [0 0 1 0 0 0]\n",
      " [0 0 0 1 0 0]\n",
      " [0 0 0 0 1 0]\n",
      " [0 0 0 0 0 1]]\n",
      "--- 0.6493628025054932 seconds ---\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.cluster import KMeans\n",
    "from sklearn.metrics import confusion_matrix\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "import seaborn as sns\n",
    "from scipy.stats import mode\n",
    "from sklearn.metrics import adjusted_rand_score\n",
    "from collections import Counter\n",
    "from scipy.spatial.distance import cdist\n",
    "import time \n",
    "\n",
    "start_time=time.time()\n",
    "data = pd.read_csv('/kaggle/input/dermatology-dataset-classification/dermatology_database_1.csv')\n",
    "data_size = data.shape\n",
    "print(\"Number of rows before:\", data_size[0])\n",
    "\n",
    "data = data.replace('?', np.nan)\n",
    "\n",
    "\n",
    "data = data.dropna()\n",
    "\n",
    "X = data.drop(['class', 'age'], axis=1)\n",
    "scaler = StandardScaler()\n",
    "X_scaled = scaler.fit_transform(X)\n",
    "data_size = data.shape\n",
    "print(\"Number of rows after:\", data_size[0])\n",
    "n_clusters = 6\n",
    "\n",
    "kmeans = KMeans(n_clusters=n_clusters,n_init=1,init='k-means++', max_iter=4,random_state=None)\n",
    "kY=kmeans.fit_predict(X_scaled)\n",
    "centroids = kmeans.cluster_centers_\n",
    "\n",
    "\n",
    "inertia_values = []\n",
    "for i in range(1, 10):  # Assuming max_iter=10\n",
    "    kmeans_iter = KMeans(n_clusters=6,n_init=1, max_iter=i,init='random',random_state=42,algorithm='elkan')\n",
    "    kmeans_iter.fit(X)\n",
    "    inertia_values.append(kmeans_iter.inertia_)\n",
    "plt.plot(np.arange(1, len(inertia_values) + 1), inertia_values, marker='o')\n",
    "plt.xlabel('Iteration')\n",
    "plt.ylabel('Variation')\n",
    "plt.title('Variation vs. Iteration')\n",
    "plt.grid(True)\n",
    "plt.show()\n",
    "\n",
    "\n",
    "\n",
    "cluster_labels=kY\n",
    "true_labels=data['class'].values\n",
    "\n",
    "cluster_indexes = [[] for _ in range(6)]\n",
    "for i, label in enumerate(kY):\n",
    "    cluster_indexes[label].append(i)\n",
    "\n",
    "\n",
    "\n",
    "print(\"Cluster Labels:\", kY)\n",
    "cluster_indexes = [[] for _ in range(6)]\n",
    "for i, label in enumerate(kY):\n",
    "    cluster_indexes[label].append(i)\n",
    "\n",
    "# Print the indexes of data points for each cluster\n",
    "for i, cluster in enumerate(cluster_indexes):\n",
    "    print(f\"Cluster {i} indexes: {cluster}\\n\")\n",
    "value_counts = Counter(kY)\n",
    "\n",
    "for value, count in value_counts.items():\n",
    "    print(f\"Value {value}: Count {count}\")\n",
    "print('\\n\\n\\n\\n\\n')\n",
    "\n",
    "print(\"Original Labels:\", data['class'].values)\n",
    "original_indexes = [[] for _ in range(len(set(data['class'].values)))]\n",
    "for i, original_label in enumerate(data['class'].values):\n",
    "    original_indexes[list(set(data['class'].values)).index(original_label)].append(i)\n",
    "for i, original_label in enumerate(list(set(data['class'].values))):\n",
    "    print(f\"{original_label} indexes: {original_indexes[i]}\\n\")\n",
    " \n",
    "value_counts2 = Counter(true_labels)\n",
    "for value, count in value_counts2.items():\n",
    "    print(f\"Value {value}: Count {count}\")\n",
    "intra_cluster_distances = []\n",
    "inter_cluster_distances = []\n",
    "\n",
    "total_intra_cluster_distance = 0\n",
    "for i in range(n_clusters):\n",
    "    cluster_mask = (cluster_labels == i)\n",
    "    cluster_data = X_scaled[cluster_mask]\n",
    "    distances_to_centroid = np.linalg.norm(cluster_data - centroids[i], axis=1)\n",
    "    total_intra_cluster_distance += np.sqrt(np.sum(distances_to_centroid ** 2))\n",
    "\n",
    "# Calculate the total inter-cluster distance\n",
    "total_mean = np.mean(X_scaled, axis=0)\n",
    "total_inter_cluster_distance = 0\n",
    "for i in range(n_clusters):\n",
    "    cluster_data = X_scaled[cluster_labels == i]\n",
    "    total_inter_cluster_distance += np.sqrt(len(cluster_data) * np.linalg.norm(centroids[i] - total_mean) ** 2)\n",
    "\n",
    "print(f\"Total intra-cluster distance: {total_intra_cluster_distance:.3f}\")\n",
    "print(f\"Total inter-cluster distance: {total_inter_cluster_distance:.3f}\")\n",
    "\n",
    "cluster_to_true_mapping = {\n",
    "    0: 6,\n",
    "    1: 2,\n",
    "    3: 1,\n",
    "    5: 3,\n",
    "    2: 5,\n",
    "    4: 4\n",
    "}\n",
    "\n",
    "# Define the predicted cluster labels and true labels\n",
    "predicted_cluster_labels = [0, 1, 3, 5, 2, 4]\n",
    "true_labels = [6, 2, 1, 3, 5, 4]\n",
    "\n",
    "# Map the predicted cluster labels to true labels\n",
    "mapped_true_labels = [cluster_to_true_mapping[label] for label in predicted_cluster_labels]\n",
    "\n",
    "# Calculate the confusion matrix\n",
    "conf_matrix = confusion_matrix(true_labels, mapped_true_labels)\n",
    "\n",
    "print(\"Confusion Matrix:\")\n",
    "print(conf_matrix)\n",
    "\n",
    "\n",
    "print(\"--- %s seconds ---\" % (time.time() - start_time))\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 3243099,
     "sourceId": 5642556,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30558,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 10.45465,
   "end_time": "2024-04-22T16:45:04.197522",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-04-22T16:44:53.742872",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
